<?php
// $Id$

/**
 * Implement hook_theme().
 */
function quicktabs_theme() {
  return array(
    // list quicktabs
    'quicktabs_admin_form_tabs' => array(
      'arguments' => array('form' => NULL),
    ),
    'quicktabs_tabs' => array(
      'arguments' => array('quicktabs', 'active_tab' => 'none'),
    ),
    'quicktabs' => array(
      'arguments' => array('quicktabs'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function quicktabs_menu() {
  $items['admin/structure/quicktabs'] = array(
    'title' => 'Quicktabs',
    'description' => 'Create blocks of tabbed content.',
    'page callback' => 'quicktabs_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/quicktabs/styles'] = array(
    'title' => 'Styles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_styles'),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/add'] = array(
    'title' => 'Add quicktab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_form', 'add'),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/%quicktabs/edit'] = array(
    'title' => 'Edit quicktab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_form', 'edit', 3),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/%quicktabs/delete'] = array(
    'title' => 'Delete quicktab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_block_delete', 3),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/%quicktabs/clone'] = array(
    'title' => 'Clone quicktab',
    'page callback' => 'quicktabs_clone',
    'page arguments' => array(3),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/admin.inc',
  );
  $items['quicktabs/ajax/node'] = array(
    'page callback' => 'quicktabs_ajax_node',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['quicktabs/ajax/block'] = array(
    'page callback' => 'quicktabs_ajax_block',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['quicktabs/ajax/qtabs'] = array(
    'page callback' => 'quicktabs_ajax_qtabs',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implement hook_permission().
 */
function quicktabs_permission() {
  return array(
    'administer quicktabs' => array(
      'title' => t('Administer Quick Tabs'),
      'description' => t('Perform administration tasks for Quick Tabs module.'),
    ),
  );
}


/**
 * Implement hook_block_list().
 */
function quicktabs_block_info() {
  $blocks = array();
  $result = db_query("SELECT qtid, title FROM {quicktabs}");
  foreach ($result as $quicktab) {
    $blocks[$quicktab->qtid]['info'] = $quicktab->title;
    $blocks[$quicktab->qtid]['cache'] = BLOCK_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implement hook_block_view().
 */
function quicktabs_block_view($delta = '') {
  $block = array();
  if ($quicktabs = quicktabs_load($delta)) {
    $block['subject'] = $quicktabs->title;
    $block['content'] = theme('quicktabs', $quicktabs); //@todo
  }
  return $block;
}

/**
 * Load the quicktabs data.
 */
function quicktabs_load($qtid) {
  $quicktabs = db_query("SELECT qtid, title, tabs, ajax, style FROM {quicktabs} WHERE qtid = :qtid", array(':qtid' => $qtid))->fetchObject();
  if (!$quicktabs) {
    return FALSE;
  }

  $tabs = unserialize($quicktabs->tabs);
  foreach ($tabs as $key => $tab) {
    $weight[$key] = $tab['weight'];
    if ($tab['type'] == 'qtabs' && $tab['qtid'] == $qtid) {
      unset($tabs[$key]);
      unset($weight[$key]);
    }
  }
  array_multisort($weight, SORT_ASC, $tabs);

  $quicktabs->tabs = $tabs;
  return $quicktabs;
}

/**
 * Render quicktabs.
 */
function quicktabs_render($quicktabs) {

  $tabs_count = count($quicktabs->tabs);
  if ($tabs_count <= 0) {
    return '';
  }

  if ($quicktabs->style == 'default') {
    $quicktabs->style = variable_get('quicktabs_tabstyle', 'nostyle');
  }
  // convert views arguments to an array, retrieving %-style args from url
  //$quicktabs->tabs = _quicktabs_prepare_views_args($quicktabs->tabs);

  quicktabs_add_css($quicktabs->style);
  $javascript = drupal_add_js('misc/progress.js', 'core');
  if (!isset($javascript['setting'][1]['quicktabs']) || !array_key_exists('qt_'. $quicktabs['qtid'], $javascript['setting'][1]['quicktabs'])) {
    drupal_add_js(array('quicktabs' => array('qt_'. $quicktabs->qtid => $quicktabs)), 'setting');
  }
  drupal_add_js(drupal_get_path('module', 'quicktabs') .'/js/quicktabs.js');

  $attributes = drupal_attributes(array(
    'id' => 'quicktabs-'. $quicktabs->qtid,
    'class' => 'quicktabs_wrapper quicktabs-style-'. drupal_strtolower($quicktabs->style),
  ));
  $output = '<div'. $attributes .'>';
  $active_tab = _quicktabs_get_active_tab($quicktabs);
  
  $output .= theme('quicktabs_tabs', $quicktabs, $active_tab);
 
  // The main content area, each quicktab container needs a unique id.
  $attributes = drupal_attributes(array(
    'id' => 'quicktabs_container_'. $quicktabs->qtid,
    'class' => 'quicktabs_main quicktabs-style-'. drupal_strtolower($quicktabs->style),
  ));
  $output .= '<div'. $attributes .'>';

  if ($quicktabs->ajax) {
    // Prepare ajax views.
    //_quicktabs_prepare_views($quicktabs->tabs);
    // Prepare ajax quicktabs.
    //_quicktabs_prepare_qts($quicktabs->tabs);
    // Render only the active tabpage.
    if (isset($active_tab)) {
      $attributes = drupal_attributes(array(
        'id' => 'quicktabs_tabpage_'. $quicktabs->qtid .'_'. $active_tab,
        'class' => 'quicktabs_tabpage',
      ));
      $output .= '<div'. $attributes .'>'. quicktabs_render_tabpage($quicktabs->tabs[$active_tab]) .'</div>';
    }
  }
  else {
    // Render all tabpgages.
    foreach ($quicktabs->tabs as $key => $tab) {
      $attributes = drupal_attributes(array(
        'id' => 'quicktabs_tabpage_'. $quicktabs->qtid .'_'. $key,
        'class' => 'quicktabs_tabpage'. ($active_tab == $key ? '' : ' quicktabs-hide'),
      ));
      $output .= '<div'. $attributes .'>'. quicktabs_render_tabpage($tab) .'</div>';   
    }
  }
  $output .= '</div></div>';
  return $output;
}

/**
 * Ajax callback for node tabpage.
 */
function quicktabs_ajax_node($nid, $teaser, $hide_title) {
  $tabpage = array(
    'type' => 'node',
    'nid' => $nid,
    'teaser' => $teaser,
    'hide_title' => $hide_title,
  );
  $output = quicktabs_render_tabpage($tabpage);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
}

/**
 * Ajax callback for block tabpage.
 */
function quicktabs_ajax_block($bid, $hide_title) {
  $tabpage = array(
    'type' => 'block',
    'bid' => $bid,
    'hide_title' => $hide_title,
  );

  $output = quicktabs_render_tabpage($tabpage);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
}

/**
 * Ajax callback for qtabs tabpage.
 */
function quicktabs_ajax_qtabs($qtid) {
  $tabpage = array(
    'type' => 'qtabs',
    'qtid' => $qtid,
  );

  $output = quicktabs_render_tabpage($tabpage);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
}

/**
 * Render quicktabs tabpage.
 */
function quicktabs_render_tabpage($tab) {
  $output = '&nbsp;';
  switch ($tab['type']) {
    case 'qtabs':
      if (isset($tab['qtid'])) {
        if ($quicktabs = quicktabs_load($tab['qtid'])) {
          $output = theme('quicktabs', $quicktabs);
        }
      }
      break;

    case 'view':
      if (isset($tab['vid'])) {
        if (module_exists('views')) {
          if ($view = views_get_view($tab['vid'])) {
            if ($view->access($tab['display'])) {
              $view->set_display($tab['display']);
              $view->set_arguments($tab['args']);
              $output = $view->preview();
            }
            else {
              $output = theme('quicktabs_tab_access_denied', $tab);
            }
            $view->destroy();
          }
        }
        else {
          $output = t('Views module not enabled, cannot display tab content.');
        }
      }
      break;

    case 'block':
      if (isset($tab['bid'])) {
        $pos = strpos($tab['bid'], '_delta_');
        $blockmodule = substr($tab['bid'], 0, $pos);
        $blockdelta = substr($tab['bid'], $pos + 7);
        $block = (object) module_invoke($blockmodule, 'block_view', $blockdelta);
        if (isset($block->content)) {
          $block->module = $blockmodule;
          $block->delta = $blockdelta;
          $block->region = 'quicktabs_tabpage';
          if ($tab['hide_title'] || !isset($block->subject)) {
            $block->subject = FALSE;
          }
          // TODO: this seems clumsy, find out the proper way of rendering a themed block
          $output = theme('block', array('#block' => $block, '#children' => $block->content, '#markup' => $block->content));
        }
      }
      break;

    case 'node':
      if (isset($tab['nid'])) {
        $node = node_load($tab['nid']);
        if (!empty($node)) {
          if (node_access('view', $node)) {
            $buildmode = $tab['teaser'] ? 'teaser' : 'full';
            $nstruct = node_build($node, $buildmode);
            $output = drupal_render($nstruct);
          }
          else {
            $output = theme('quicktabs_tab_access_denied', $tab);
          }
        }
      }
      break;

    case 'freetext':
      $output = $tab['text'];
      break;
  }

  return $output;
}


/**
 * Fetch the necessary CSS files for the tab styles.
 */
function quicktabs_add_css($style) {
  // Add quicktabs CSS.
  drupal_add_css(drupal_get_path('module', 'quicktabs') .'/css/quicktabs.css');

  if ($style == 'default') {
    // Get the default style.
    $style = variable_get('quicktabs_tabstyle', 'nostyle');
  }

  $style_css = _quicktabs_get_style_css($style);

  if ($style_css != 'nostyle') {
    drupal_add_css($style_css, 'module');
  }
}

/**
 * Theme function to display the access denied tab.
 *
 * @ingroup themeable
 */
function theme_quicktabs_tab_access_denied($tab) {
  return t('You are not authorized to access this content.');
}

/**
 * Theme function to output quicktabs.
 *
 * @ingroup themeable
 */
function theme_quicktabs($quicktabs) {
  return quicktabs_render($quicktabs);
}

/**
 * Theme function for output of the tabs. Use this to ADD extra classes.
 * The general structure 'ul.quicktabs_tabs li a' needs to be maintained
 * for the jQuery to work.
 *
 * @ingroup themeable
 */
function theme_quicktabs_tabs($quicktabs, $active_tab = 'none') {
  $output = '';
  $tabs_count = count($quicktabs->tabs);
  if ($tabs_count <= 0) {
    return $output;
  }

  $index = 1;

  $output .= '<ul class="quicktabs_tabs quicktabs-style-'. drupal_strtolower($quicktabs->style) .'">';
  foreach ($quicktabs->tabs as $i => $tab) {
    $class = 'qtab-'. $i;
    // Add first, last and active classes to the list of tabs to help out themers.
    $class .= ($i == $active_tab ? ' active' : '');
    $class .= ($index == 1 ? ' first' : '');
    $class .= ($index == $tabs_count ? ' last': '');
    $attributes_li = drupal_attributes(array('class' => $class));
    
    $options = _quicktabs_construct_link_options($quicktabs, $i);
    $output .= '<li'. $attributes_li .'>'. l($tab['title'], $_GET['q'], $options) .'</li>';

    $index++;
  }
  $output .= '</ul>';
  
  return $output;
}

/**
 * Implementation of hook_quicktabs_tabstyles().
 *
 * This hook allows other modules to create additional tab styles for
 * the quicktabs module.
 *
 * @return array
 *   An array of key => value pairs suitable for inclusion as the #options in a
 *   select or radios form element. Each key must be the location of a css
 *   file for a quick tabs style. Each value should be the name of the style.
 */
function quicktabs_quicktabs_tabstyles() {
  $tabstyles_directory = drupal_get_path('module', 'quicktabs') .'/tabstyles';
  $files = file_scan_directory($tabstyles_directory, '/\.css$/');

  $tabstyles = array();
  foreach ($files as $file) {
    // Skip RTL files.
    if (!strpos($file->name, '-rtl')) {
      $tabstyles[$file->filename] = drupal_ucfirst($file->name);
    }
  }
  return $tabstyles;
}


/**
 * Helper function to construct link options for tab links.
 */
function _quicktabs_construct_link_options($quicktabs, $tabkey) {
  $qtid = $quicktabs->qtid;
  $ajax = $quicktabs->ajax;
  $tab = $quicktabs->tabs[$tabkey];
  $id = 'quicktabs-tab-'. implode('-', array($qtid, $tabkey));

  // need to construct the correct querystring for the tab links
  $queries = $_GET;
  unset($queries['quicktabs_'. $qtid]);
  unset($queries['q']);
  unset($queries['page']);
  $querystring = '';
  if (!empty($queries)) {
    $i = 0;
    foreach ($queries as $key => $value) {
      $querystring .= $i > 0 ? '&'. $key .'='. $value : $key .'='. $value;
      $i++;
    }
    $querystring .= '&';
  }
  $querystring .= 'quicktabs_'. $qtid .'='. $tabkey;
  $class = array();

  if ($ajax) {
    $class[] = 'qt_ajax_tab';
  }
  else {
    $class[] = 'qt_tab';
  }

  $link_options = array(
    'attributes' => array(
      'id' => $id,
      'class' => $class,
    ),
    'query' => $querystring,
    'fragment' => 'quicktabs-'. $qtid,
  );
  return $link_options;
}

/**
 * Helper function to get the css file for given style.
 */
function _quicktabs_get_style_css($style = 'nostyle') {
  static $tabstyles;

  if ($style != 'nostyle') {
    if (!isset($tabstyles)) {
      $tabstyles = module_invoke_all('quicktabs_tabstyles');
    }
    foreach ($tabstyles as $css_file => $tabstyle) {
      if ($style == $tabstyle) {
        return $css_file;
      }
    }
  }

  return 'nostyle';
}

/**
 * Helper function to determine active tab from the url.
 */
function _quicktabs_get_active_tab($quicktabs) {
  $active_tab = isset($_GET['quicktabs_'. $quicktabs->qtid]) ? $_GET['quicktabs_'. $quicktabs->qtid] : key($quicktabs->tabs);
  if (isset($active_tab) && isset($quicktabs->tabs[$active_tab])) {
    return $active_tab;
  }
  return NULL;
}

/**
 * Helper function to add quicktabs settings to ajax tabs.
 */
function _quicktabs_prepare_qts($tabs) {
  foreach ($tabs as $key => $tab) {
    if ($tab['type'] == 'qtabs') {
      $quicktabs = quicktabs_load($tab['qtid']);
      // We need to pass qt details to js in case there is ajax paging.
      $settings = array(
        'quicktabs' => array(
          'qt_'. $tab['qtid'] => $quicktabs,
        ),
      );
      drupal_add_js($settings, 'setting');
    }
  }
}
