<?php

/**
 * Implements hook_help().
 * TODO: Update this!
 */
function quicktabs_help($path, $arg) {
  switch ($path) {
    case 'admin/help#quicktabs':
      $output = '<p>' . t('The Quick Tabs module allows you to create blocks of tabbed content. Clicking on the tabs makes the corresponding content display instantly (it uses jQuery). The content for each tabbed section can be either a node, view, block or another quicktab. It is an ideal way to do something like the Most Popular / Most Emailed stories tabs you see on many news websites. You may create an unlimited number of additional quicktabs, each of which will automatically have an associated block.') . '</p>';
      $output .= '<p>' . t('The <a href="@quicktabs">quicktabs page</a> displays all quicktabs currently available on your site. Create new quicktabs using the <a href="@add-quicktab">add quicktab page</a> (the block containing a new quicktab must also be enabled on the <a href="@blocks">blocks administration page</a>).', array('@quicktabs' => url('admin/structure/quicktabs'), '@add-quicktab' => url('admin/structure/quicktab/add'), '@blocks' => url('admin/structure/block'))) . '</p>';
      return $output;
  }
  if ($path == 'admin/structure/quicktabs' && module_exists('block')) {
    return '<p>' . t('Each quicktab has a corresponding block that is managed on the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function quicktabs_menu() {
  $items['admin/structure/quicktabs'] = array(
    'title' => 'Quicktabs',
    'description' => 'Create blocks of tabbed content.',
    'page callback' => 'quicktabs_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'quicktabs.admin.inc',
  );
  $items['admin/structure/quicktabs/list'] = array(
    'title' => 'List quicktabs',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/quicktabs/add'] = array(
    'title' => 'Add quicktab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_form', 'add'),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'quicktabs.admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs'] = array(
    'title' => 'Edit quicktab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_form', 'edit', 4),
    'access arguments' => array('administer quicktabs'),
    'file' => 'quicktabs.admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/edit'] = array(
    'title' => 'Edit quicktab',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/delete'] = array(
    'title' => 'Delete quicktab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_block_delete', 4),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quicktabs.admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/clone'] = array(
    'title' => 'Clone quicktab',
    'page callback' => 'quicktabs_clone',
    'page arguments' => array(4),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quicktabs.admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_export_form', 4),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quicktabs.admin.inc',
  );
  $items['qt'] = array(
    'page callback' => 'quicktabs_get_content',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function quicktabs_permission() {
  return array(
    'administer quicktabs' => array(
      'title' => t('Administer Quick Tabs'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function quicktabs_theme() {
  return array(
    'quicktabs_admin_form_tabs' => array(
      'render element' => 'tabs',
      'file' => 'quicktabs.admin.inc',
    ),
    'quicktabs_tabs' => array(
      'render element' => 'tabset',
    ),
    'quicktabs' => array(
      'render element' => 'element',
    ),
    'quick_accordion' => array(
      'render element' => 'element',
    ),
    'quicktabs_tab_access_denied' => array(
      'variables' => array('tab'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function quicktabs_block_info() {
  $blocks = array();
  foreach (quicktabs_load_multiple() as $qt_name => $quicktabs) {
    $blocks[$qt_name]['info'] = $quicktabs->title;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function quicktabs_block_view($delta = '') {
  $block = array();
  if ($quicktabs = quicktabs_load($delta)) {
    $contents = $quicktabs->tabs;
    $name = $quicktabs->machine_name;
    $renderer = $quicktabs->renderer;
    $block['subject'] = $quicktabs->title;
    unset($quicktabs->tabs, $quicktabs->machine_name, $quicktabs->renderer);
    $options = (array) $quicktabs;
    $qf = new QuickieFactory();
    $qt = $qf->getQuickie($name, $contents, $renderer, $options);
    $block['content'] = $qt->render();
    if (!empty($block['content'])) {
      $block['content']['#contextual_links']['quicktabs'] = array('admin/structure/quicktabs/manage', array($delta));
    }
  }
  return $block;
}


/**
 * Unpack a quicktabs row array from the database.
 */
function _quicktabs_unpack($qt) {
  $tabs = unserialize($qt->tabs);
  $weight = array();
  foreach ($tabs as $key => $tab) {
    $weight[$key] = $tab['weight'];
    if ($tab['type'] == 'qtabs' && $tab['machine_name'] == $qt->machine_name) {
      unset($tabs[$key]);
      unset($weight[$key]);
    }
  }
  array_multisort($weight, SORT_ASC, $tabs);

  $qt->tabs = $tabs;
  // @todo: this needs to be used at ctools load also.
  drupal_alter('quicktabs', $qt);
  return $qt;
}

/**
 * Load the quicktabs data.
 */
function quicktabs_load($name) {
  $qts = quicktabs_load_multiple(array($name));
  return $qts[$name];
}

/**
 * Load the quicktabs data.
 */
function quicktabs_load_multiple($names = array()) {

  // Load quicktabs via ctools if present.
  if (module_exists('ctools')) {
    ctools_include('export');
    $defaults = empty($names) ? ctools_export_load_object('quicktabs', 'all') : ctools_export_load_object('quicktabs', 'names', $names);
    return $defaults;
  }

  // Load quicktabs from the database.
  $query = db_select('quicktabs', 'q');
  $query->fields('q', array('machine_name', 'title', 'tabs', 'ajax', 'hide_empty_tabs', 'default_tab', 'renderer'));
  if (!empty($names)) {
    $query->condition('q.machine_name', $names, 'IN');
  }
  $result = $query->execute();  
  
  foreach ($result as $qt) {
    $quicktabs[$qt->machine_name] = _quicktabs_unpack($qt);
  }
  return $quicktabs;
}

/**
 * @todo: Enter description here ...
 * @param $method
 * @param $type
 * @param $id
 * @param $qt_name
 * @param $index
 */
function quicktabs_get_content($method = 'nojs', $type, $id, $qt_name, $index) {
  if ($method == 'nojs') {
    $query = drupal_get_query_parameters(NULL, array('q', 'dest'));
    drupal_goto($_GET['dest'], array('query' => $query));
  }
  else {
    $func = 'quicktabs_ajax_'. $type;
    $output = $func($id);
    ajax_deliver($output);
  }
}

/**
 * Ajax callback for node tabpage.
 */
function quicktabs_ajax_node($nid, $teaser = FALSE, $hide_title = FALSE) {
  $tabpage = array(
    'type' => 'node',
    'nid' => $nid,
    'teaser' => $teaser,
    'hide_title' => $hide_title,
  );
  $output = Quickie::render_content_item($tabpage);
  return $output;
}

/**
 * Ajax callback for view tabpage.
 */
function quicktabs_ajax_view($vid) {
  // TODO: Need to get the display and args!!
  $tabpage = array(
    'type' => 'view',
    'vid' => $vid,
    'display' => 'default', //$display,
    'args' => array(),
  );
  $output = Quickie::render_content_item($tabpage);
  return $output;
}

/**
 * Ajax callback for block tabpage.
 */
function quicktabs_ajax_block($bid, $hide_title = FALSE) {
  $tabpage = array(
    'type' => 'block',
    'bid' => $bid,
    'hide_title' => $hide_title,
  );

  $output = Quickie::render_content_item($tabpage);
  return $output;
}

/**
 * Ajax callback for qtabs tabpage.
 */
function quicktabs_ajax_qtabs($qt_name) {
  $tabpage = array(
    'type' => 'qtabs',
    'machine_name' => $qt_name,
  );

  $output = Quickie::render_content_item($tabpage);
  return $output;
}

/**
 * Implements hook_quicktabs_renderers().
 */
function quicktabs_quicktabs_renderers() {
  return array('accordion', 'tabs');
}

/**
 * Theme function to display the access denied tab.
 *
 * @ingroup themeable
 */
function theme_quicktabs_tab_access_denied($variables) {
  $tab = $variables['tab'];

  return t('You are not authorized to access this content.');
}

/**
 * Theme function to output quicktabs.
 *
 * @ingroup themeable
 */
function theme_quicktabs($variables) {
  $element = $variables['element'];
  $output = '<div '. drupal_attributes($element['#options']['attributes']) .'>';
  $output .= drupal_render($element['tabs']);

  if (isset($element['active'])) {
    $output .= drupal_render($element['active']);
  }
  else {
    foreach ($element['divs'] as $div) {
      $output .= drupal_render($div);
    }
  }

  $output .= '</div>';
  return $output;
}

/**
 * Theme function to output quicktabs.
 *
 * @ingroup themeable
 */
function theme_quick_accordion($variables) {
  $element = $variables['element'];
  $output = '<div '. drupal_attributes($element['#options']['attributes']) .'>';
  foreach ($element['divs'] as $div) {
    $output .= drupal_render($div);
  }

  $output .= '</div>';
  return $output;
}

/**
 * @todo: Enter description here ...
 */
function theme_quicktabs_tabs($vars) {

  $output = '<ul>';
  foreach ($vars['tabset']['tablinks'] as $i => $tab) {
    if (is_array($tab)) {
      $output .= '<li>'. drupal_render($tab) .'</li>';
    }
  }
  $output .= '</ul>';
  return $output;
}

